//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;
use serde::Deserialize;
use serde::Serialize;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
	fn table_name(&self) -> &str {
		"user"
	}
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
	pub user_id: Uuid,
	pub name: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
	UserId,
	Name,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
	UserId,
}

impl PrimaryKeyTrait for PrimaryKey {
	type ValueType = Uuid;
	fn auto_increment() -> bool {
		false
	}
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
	Note,
}

impl ColumnTrait for Column {
	type EntityName = Entity;
	fn def(&self) -> ColumnDef {
		match self {
			Self::UserId => ColumnType::Uuid.def(),
			Self::Name => ColumnType::Text.def(),
		}
	}
}

impl RelationTrait for Relation {
	fn def(&self) -> RelationDef {
		match self {
			Self::Note => Entity::has_many(super::note::Entity).into(),
		}
	}
}

impl Related<super::note::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Note.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
