//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;
use serde::Deserialize;
use serde::Serialize;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
	fn table_name(&self) -> &str {
		"note"
	}
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
	pub note_id: Uuid,
	pub user_id: Uuid,
	pub created_at: DateTimeWithTimeZone,
	pub updated_at: Option<DateTimeWithTimeZone>,
	pub title: String,
	pub body: String,
	pub is_done: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
	NoteId,
	UserId,
	CreatedAt,
	UpdatedAt,
	Title,
	Body,
	IsDone,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
	NoteId,
}

impl PrimaryKeyTrait for PrimaryKey {
	type ValueType = Uuid;
	fn auto_increment() -> bool {
		false
	}
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
	Users,
}

impl ColumnTrait for Column {
	type EntityName = Entity;
	fn def(&self) -> ColumnDef {
		match self {
			Self::NoteId => ColumnType::Uuid.def(),
			Self::UserId => ColumnType::Uuid.def(),
			Self::CreatedAt => ColumnType::TimestampWithTimeZone.def(),
			Self::UpdatedAt => ColumnType::TimestampWithTimeZone.def().null(),
			Self::Title => ColumnType::Text.def(),
			Self::Body => ColumnType::Text.def(),
			Self::IsDone => ColumnType::Boolean.def(),
		}
	}
}

impl RelationTrait for Relation {
	fn def(&self) -> RelationDef {
		match self {
			Self::Users => Entity::belongs_to(super::users::Entity)
				.from(Column::UserId)
				.to(super::users::Column::UserId)
				.into(),
		}
	}
}

impl Related<super::users::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Users.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
